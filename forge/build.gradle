buildscript {
    repositories {
        mavenCentral()
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenLocal()
    }
    dependencies {
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
    }
}

plugins {
    id 'net.minecraftforge.gradle' version '6.+'
    id 'com.matthewprenger.cursegradle' version '1.4.0'
    id 'net.linguica.maven-settings' version '0.5'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id 'mod-update' version '2.0.0'
}

apply plugin: 'org.spongepowered.mixin'
apply plugin: 'com.modrinth.minotaur'

archivesBaseName = project.archives_base_name
version = mod_version
group = maven_group

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {
    mappings channel: 'official', version: minecraft_version

    runs {
        client {
            workingDirectory file('run')
            property 'forge.logging.console.level', 'debug'
        }
        server {
            workingDirectory file('run/server').canonicalPath
            property 'forge.logging.console.level', 'debug'
            arg '--nogui'
        }
    }
}

repositories {
    mavenCentral()
    maven { url = 'https://maven.shedaniel.me/' }
    maven { url = 'https://maven.fabricmc.net/' }
    maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
    maven { url = 'https://maven.maxhenkel.de/repository/public' }
    maven {
        url = 'https://api.modrinth.com/maven'
        content {
            includeGroup 'maven.modrinth'
        }
    }
    mavenLocal()
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

configurations {
    shadowMc.extendsFrom minecraftLibrary
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    implementation(project(':common')) {
        transitive false
    }

    implementation 'com.google.code.findbugs:jsr305:3.0.2'

    implementation "de.maxhenkel.voicechat:voicechat-api:${voicechat_api_version}"

    runtimeOnly fg.deobf("maven.modrinth:simple-voice-chat:forge-${voicechat_version}")

    implementation fg.deobf("me.shedaniel.cloth:cloth-config-forge:${cloth_config_version}")

    annotationProcessor 'org.spongepowered:mixin:0.8.4:processor'

    minecraftLibrary "de.maxhenkel.configbuilder:configbuilder:${configbuilder_version}"
    shadowMc "de.maxhenkel.configbuilder:configbuilder:${configbuilder_version}"
}

mixin {
    add sourceSets.main, "${mod_id}.refmap.json"
}

processResources {
    filesMatching('**/*.toml') {
        expand 'mod_id': mod_id,
                'mod_version': mod_version,
                'mod_name': mod_name,
                'mod_forge_version': mod_forge_version,
                'mod_loader_version': mod_loader_version,
                'minecraft_version': minecraft_version,
                'cloth_config_version': cloth_config_version,
                'voicechat_api_version': voicechat_api_version
    }
    from("${project(':common').projectDir}/src/main/resources") {
        exclude('*.mixins.json')
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

tasks.withType(JavaCompile) {
    source(project(':common').sourceSets.main.allSource)
}

task prepareWorkspace {

}

jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    manifest {
        attributes(['Specification-Title'     : mod_name,
                    'Specification-Vendor'    : mod_vendor,
                    'Specification-Version'   : '1',
                    'Implementation-Title'    : mod_name,
                    'Implementation-Version'  : mod_version,
                    'Implementation-Vendor'   : mod_vendor,
                    'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                    'MixinConnector'          : 'com.sonicether.soundphysics.MixinConnector'
        ])
    }
}

curseforge {
    apiKey = file("${rootDir}/curseforge_api_key.txt").exists() ? file("${rootDir}/curseforge_api_key.txt").text : ''
    project {
        id = curse_id
        changelogType = 'markdown'
        changelog = file('changelog.md')
        releaseType = release_type
        addGameVersion curseforge_minecraft_version
        addGameVersion 'Forge'
        addGameVersion 'Java 17'
        mainArtifact(jar) {
            displayName = "[FORGE][${minecraft_version}] ${mod_name} ${mod_version}"
            relations {
                optionalDependency 'cloth-config'
                optionalDependency 'simple-voice-chat'
            }
        }
    }
}

tasks.modrinth.configure({
    group = 'upload'
})

modrinth {
    token = file("${rootDir}/modrinth_token.txt").exists() ? file("${rootDir}/modrinth_token.txt").text : ''
    projectId = modrinth_id
    versionNumber = "forge-${mod_version}"
    versionName = "[FORGE][${minecraft_version}] ${mod_name} ${mod_version}"
    uploadFile = jar
    versionType = release_type.toUpperCase()
    changelog = file('changelog.md').text
    gameVersions = [minecraft_version]
    loaders = ['forge']
    dependencies {
        optional.project '9eGKb6K1' // Simple Voice Chat
        optional.project '9s6osm5g' // ClothConfig
    }
}
tasks.modrinth.dependsOn(build)

modUpdate {
    serverURL = 'https://update.maxhenkel.de/'
    modID = mod_id
    gameVersion = minecraft_version
    modVersion = mod_version
    changelogFile = file('changelog.md')
    releaseType = release_type
    tags = recommended == 'true' ? ['recommended'] : []
}

jar.finalizedBy('reobfJar')

shadowJar {
    configurations = [project.configurations.shadowMc]
    archiveClassifier = ''
    relocate 'de.maxhenkel.configbuilder', 'com.sonicether.soundphysics.configbuilder'
}

reobf {
    shadowJar {}
}
tasks.shadowJar.mustRunAfter('reobfJar')
